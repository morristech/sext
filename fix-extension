#!/bin/bash

# this needs to recognize commented-out fields!
# became a problem for betterprivacy 1.68

. /usr/share/ppz/bash.functions

good-xml() {
	 is xml "$1" || return 1
	 cat "$1" | xml val -w -q -e - || return 1
}
xmlns-args() { local xmlns prefix file IFS=$'\n'
	 ns="" #namespace strings (pass to xml as -N)
	 defns="" # default namespace prefix in xpaths

	 good-xml "$1" && file=$1 || return 1

	 # for every xmlns declaration in the file
	 for xmlns in $(cat "$file" | grep -ioE 'xmlns(:[a-z0-9]+)?="[^"]*"' | sort -u); do
#		  echo "DOING: $xmlns"
		  # remove double-quotes
		  xmlns=${xmlns//\"}

		  if [ ${xmlns:5:1} = = ]; then
				# it starts like xmlns=http://...
				# so we set a "default namespace"
				defns=defns:
				xmlns=defns=${xmlns:6}
		  else
				# it starts like xmlns:foo=http://...
				# so we remove 'xmlns:'
				xmlns=${xmlns:6}
				# if foo is rdf/RDF, make that the default prefix
				prefix=${xmlns%%=*}
				if [ ${prefix,,} = rdf ]; then
					 defns=$prefix:
				fi
		  fi

		  # add to namespace string
		  ns=$ns" -N $xmlns"
	 done
}

for arg; do
	 if item=$(full_path_strict "$arg"); then
		  if [ -d "$item" ]; then
				xpj="$item"
		  elif is jar "$item"; then
				xpi="$item"
		  elif is zip "$item"; then
				xpi="$item"
		  else
				echo_red "Not an xpi or dir: $item"
		  fi
	 else
		  echo_red "Unknown option: $item"
	 fi
done

# remove any trailing slash
xpj=${xpj%/}

# figure out the right namespace strings to pass to xmlstarlet
tmprdf=/tmp/.$(uniq_token).rdf
trap "rm -rf ${tmprdf}; exit;" EXIT HUP QUIT INT TERM ABRT TSTP CONT
unzip -qp "$xpi" install.rdf > $tmprdf
xmlns-args $tmprdf

# get the unique id string and use it to create new file (xpj)
mainr_xpath="//${defns}Description[@about='urn:mozilla:install-manifest'] | //${defns}Description[@${defns}about='urn:mozilla:install-manifest']"
idstr_xpath="//${defns}Description[@about='urn:mozilla:install-manifest']/em:id | //${defns}Description[@about='urn:mozilla:install-manifest']/@em:id | //${defns}Description[@${defns}about='urn:mozilla:install-manifest']/@em:id | //${defns}Description[@${defns}about='urn:mozilla:install-manifest']/em:id"
unpak_xpath="//${defns}Description[@about='urn:mozilla:install-manifest']/em:unpack | //${defns}Description[@${defns}about='urn:mozilla:install-manifest']/@em:unpack | //${defns}Description[@${defns}about='urn:mozilla:install-manifest']/em:unpack"
if idstr=$(unzip -qp "$xpi" install.rdf | xml sel $ns -t -v "$idstr_xpath"); then
	 [[ "$idstr" =~ [a-zA-Z0-9\.{}@_-]{15,60} ]] || croak "This extension has a WEIRD id string."

	 [ -a "$xpj/$idstr" ] || [ -a "$xpj/$idstr.xpi" ] && {
		  echo "Already exists: $xpj"
		  askyn "Overwrite it?" || croak "Failing, won't overwrite existing file."
	 }

	 # leave as zip or unpack?
	 if unpak=$(unzip -qp "$xpi" install.rdf | xml sel $ns -t -v "$unpak_xpath") && [ "$unpak" = true ]; then
		  export dtype=dir
		  export xpj=$xpj/$idstr
		  mkdir -p "$xpj"
		  unzip -q "$xpi" -d "$xpj/"
	 else
		  export dtype=zip
		  export xpj=$xpj/$idstr.xpi
		  cp "$xpi" "$xpj"
	 fi
else
	 croak "Could not find a valid ID string in the manifest. Something is wrong."
fi

# update internal path in new one, from pipe
# (whether extracted or not)
toxpj() {
	 case $dtype in
		  zip)	cat <&0 | rezip "$xpj" "$1";;
		  dir)	cat <&0 >| "$xpj/$1";;
	 esac
}

# check for seamonkey maxversion
newst=2.26
maxver_xpath="//*[@em:id='{92650c4d-4b8e-4d2a-b7eb-24ecf4f6b63a}']/@em:maxVersion | //*[em:id='{92650c4d-4b8e-4d2a-b7eb-24ecf4f6b63a}']/em:maxVersion"
if verst=$(unzip -qp "$xpi" install.rdf | xml sel $ns -t -v "$maxver_xpath"); then
	 # a seamonkey clause exists!
	 case $verst in
		  2.\*|2.22.1|2.22.\*|2.23a1|2.23a2|2.23|2.23.\*|2.24a1|2.24a2|2.24|2.24.\*|2.25a1|2.25a2|2.25|2.25.\*|2.26a1|2.26a2|2.26|3.0.\*|99.\*)
#				echo_green "This plugin is already compatible with latest stable :)"
				:;;
		  1.0a|1.0|1.0.\*|1.1a|1.1b|1.1|1.1.\*|1.5a|2.0a|2.0a1pre|2.0a1|2.0a2pre) :;&
		  2.0a2|2.0a3pre|2.0a3|2.0b1pre|2.0b1|2.0b2pre|2.0b2|2.0pre|2.0|2.0.1) :;&
		  2.0.\*|2.1a1pre|2.1a1|2.1a2pre|2.1a2|2.1a3pre|2.1a3|2.1b1pre|2.1b1) :;&
		  2.1b2pre|2.1b2|2.1b3pre|2.1b3|2.1|2.1.\*|2.2a1pre|2.2|2.2.\*|2.3a2|2.3) :;&
		  2.3.\*|2.4a1|2.4a2|2.4|2.4.\*|2.5a1|2.5a2|2.5|2.5.\*|2.6.\*|2.6a1|2.6a2|2.6) :;&
		  2.6.1|2.7a1|2.7a2|2.7|2.7.1|2.7.2|2.7.\*|2.8a1|2.8a2|2.8|2.8.\*|2.9a1|2.9a2) :;&
		  2.9|2.9.\*|2.10a1|2.10a2|2.10|2.10.\*|2.11a1|2.11a2|2.11|2.11.\*|2.12a1|2.12a2) :;&
		  2.12|2.12.\*|2.13a1|2.13a2|2.13|2.13.1|2.13.2|2.13.\*|2.14a1|2.14a2|2.14) :;&
		  2.14.1|2.14.\*|2.15a1|2.15a2|2.15|2.15.1|2.15.2|2.15.\*|2.16a1|2.16a2|2.16) :;&
		  2.16.1|2.16.2|2.16.\*|2.17a1|2.17a2|2.17|2.17.1|2.17.\*|2.18a1|2.18a2|2.18) :;&
		  2.18.\*|2.19a1|2.19a2|2.19|2.19.\*|2.20a1|2.20a2|2.20|2.20.\*|2.21a1|2.21a2) :;&
		  2.21|2.21.\*|2.22a1|2.22a2|2.22)
				echo_green "Bumping from $verst to $newst"
				unzip -qp "$xpi" install.rdf \
					 | xml ed -P -u "$maxver_xpath" -v $newst \
					 | toxpj install.rdf
				;;
		  *) echo_red "Unrecognized version string: $verst";;
	 esac
else
	 echo_green "Adding Seamonkey to install.rdf"
	 u=%$(uniq_token)%
	 unzip -qp "$xpi" install.rdf \
		  | xml ed $ns -s "$mainr_xpath" -t elem -n 'em:targetApplication' -v $u \
		  | sed s_${u}_'\
				<!-- Seamonkey - added by script! -->\
				<Description>\
					<em:id>{92650c4d-4b8e-4d2a-b7eb-24ecf4f6b63a}</em:id>\
					<em:minVersion>2.0a1pre</em:minVersion>\
					<em:maxVersion>'$newst'</em:maxVersion>\
				</Description>\n'_ig \
		  | toxpj install.rdf

	 echo_green "Adding navigator overlay to chrome.manifest"
	 unzip -qp "$xpi" chrome.manifest \
		  | awk '
				{print}
				/^overlay/ {
					if ($2 == "chrome://browser/content/browser.xul") {
						$2 = "chrome://navigator/content/navigator.xul"
						print
					}
				}' \
			| uniq \
			| toxpj chrome.manifest
fi

